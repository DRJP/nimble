mc <- modelCode({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 1000
thin <- 1
monitors <- 'a'
niter <- 1000
thin <- 1
###############
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
bugs_data
bugs_modelfile
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
mc <- modelCode({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 1000
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
mc
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 1000
thin <- 1
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
tempdir()
bugs
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_data
bugs_modelfile
monitors
bugs_data
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
?bugs
class(bugs_data)
bugs_data$b
bugs_data
list(inits)
bugs_out <- bugs(data=bugs_data, parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
c ~ dnorm(a, 2)
})
constants <- list()
data <- list(b = 1, c=2)
inits <- list()
monitors <- 'a'
niter <- 1000
thin <- 1
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
bugs_data
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
niter
thin
options(error = recover)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
datalist
formatdata(datalist)
datalist
datalist
towhere
fill
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
monitors <- 'a'
niter <- 1000
thin <- 1
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
library(rjags)
jags_data <- c(constants, data)
jags_data
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitors <- 'a'
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitors, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
monitorVars <- 'a'
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list()
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
monitorVars <- c('a')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
1:3*2
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3*2) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
jags_out
jags_out[[1]]
dimnames(jags_out[[1]])
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3*2 - 1) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
dimnames(jags_out[[1]])
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3*n - 1) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list(n = 4)
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
dimnames(jags_out[[1]])
source('loadAllCode.R')
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
mcmcspec <- MCMCspec(Rmodel, print = TRUE)
Rmcmc <- buildMCMC(mcmcspec)
# nfMethod(nfVar(Rmcmc, 'samplerFunctions')$contentsList[[5]], 'run')
# debug(Rmodel$expandNodeNames)
simulate(Rmodel, 'mu[1:2]')
Rmodel$getNodeNames()
nl_expandNodeNames('mu[1:2]', Rmodel$getSymbolTable(), )
.GlobalEnv
new.env()
nl_expandNodeNames('mu[1:2]', Rmodel$getSymbolTable(), new.env())
Rmodel$getMaps('nodeNames')
source('loadAllCode.R')
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
mcmcspec <- MCMCspec(Rmodel, print = TRUE)
Rmcmc <- buildMCMC(mcmcspec)
# nfMethod(nfVar(Rmcmc, 'samplerFunctions')$contentsList[[5]], 'run')
simulate(Rmodel, 'mu[1:2]')
TMP1<-modelCode({x~dnorm(0,1)})
TMP1
TMP2<-nimbleModel(TMP1)
TMP2
TMP3<-compileNimble(TMP2)
library(nimble)
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
mcmcspec <- MCMCspec(Rmodel, print = TRUE)
Rmcmc <- buildMCMC(mcmcspec)
# nfMethod(nfVar(Rmcmc, 'samplerFunctions')$contentsList[[5]], 'run')
simulate(Rmodel, 'mu[1:2]')
source('loadAllCode.R')    ## out temporarily, until Duncan fixes the loadAllCode.R issue
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
source('loadAllCode.R')
## following is necessary if we wish to run any MV distribution functions through R:
#TMP1<-modelCode({x~dnorm(0,1)}); TMP2<-nimbleModel(TMP1); TMP3<-compileNimble(TMP2)
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
source('loadAllCode.R')
## following is necessary if we wish to run any MV distribution functions through R:
#TMP1<-modelCode({x~dnorm(0,1)}); TMP2<-nimbleModel(TMP1); TMP3<-compileNimble(TMP2)
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
mcmcspec <- MCMCspec(Rmodel, print = TRUE)
Rmodel$checkConjugacy('mu[1:2]')
source('loadAllCode.R')
## following is necessary if we wish to run any MV distribution functions through R:
#TMP1<-modelCode({x~dnorm(0,1)}); TMP2<-nimbleModel(TMP1); TMP3<-compileNimble(TMP2)
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
mcmcspec <- MCMCspec(Rmodel, print = TRUE)
Rmcmc <- buildMCMC(mcmcspec)
simulate(Rmodel, 'mu[1:2]')
Rmodel$getNodeNames()
nfMethod(nfVar(Rmcmc, 'samplerFunctions')$contentsList[[5]], 'run')
simulate(Rmodel)
Rmodel$mu0
Rmodel$Q0
Rmodel$getNodeNames()
Rmodel$a
Rmodel$b
Rmodel$B
Rmodel$y_mean
Rmodel$lifted_chol_Q_1to2_1to2
Rmodel$lifted_chol_Q0_1to2_1to2
Rmodel$mu
Rmodel$mu <- c(1,2)
Rmodel$mu
Rmodel$a
Rmodel$getNodeNames()
simulate(Rmodel, 'y_mean')
Rmodel$B[1:2, 1:2] %*% Rmodel$mu[1:2]
Rmodel$a[1:2]
Rmodel$a[1:2] + Rmodel$B[1:2, 1:2] %*% Rmodel$mu[1:2]
source('loadAllCode.R')
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- asCol(a[1:2]) + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
nfMethod(nfVar(Rmcmc, 'samplerFunctions')$contentsList[[5]], 'run')
Rmodel$checkConjugacy('mu[1:2]')
source('loadAllCode.R')
## following is necessary if we wish to run any MV distribution functions through R:
#TMP1<-modelCode({x~dnorm(0,1)}); TMP2<-nimbleModel(TMP1); TMP3<-compileNimble(TMP2)
code <- modelCode({
mu0[1] <- 1
mu0[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
mu[1:2] ~ dmnorm(mu0[1:2], Q0[1:2,1:2])
a[1] <- 3
a[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
y_mean[1:2] <- a[1:2] + B[1:2,1:2] %*% mu[1:2]   ## artificially lifted, until dmnorm() allows for expressions as arguments
y[1:2] ~ dmnorm(y_mean[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Rmodel$checkConjugacy('mu[1:2]')
mcmcspec <- MCMCspec(Rmodel, print = TRUE)
Rmcmc <- buildMCMC(mcmcspec)
nfMethod(nfVar(Rmcmc, 'samplerFunctions')$contentsList[[5]], 'run')
array(c(1,2), dim=c(1,2))
array(c(1,2), dim=c(1,2)) + c(1,2)
array(c(1,2), dim=c(2,1)) + c(1,2)
