mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
#     yVec[1:2] ~ dmnorm(muVec[1:2], Q[,])
yVec[1:2] ~ dmnorm(aVec[1:2] + muVec[1:2], Q[,])
#     yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% muVec[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2] + mu0Vec[1:2], Q0[1:2,1:2])
#     aVec[1] <- 3
#     aVec[2] <- 4
#     B[1,1] ~ dnorm(0,1)
#     B[1,2] ~ dnorm(0,1)
#     B[2,1] ~ dnorm(0,1)
#     B[2,2] ~ dnorm(0,1)
#     yVec[1:2] ~ dmnorm(muVec[1:2], Q[,])
#     yVec[1:2] ~ dmnorm(aVec[1:2] + muVec[1:2], Q[,])
#  yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% muVec[1:2], Q[,])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2] + mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Rmodel$mu0Vec
Rmodel$Q0
Rmodel$`muVec[1:2]`
Rmodel$getNodeNames()
Rmodel[['muVec[1:2]']]
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec + mu0Vec, Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec + mu0Vec, Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[] + mu0Vec[], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
code <- modelCode({
a[1] ~ dnorm(0,1)
a[2] ~ dnorm(0,1)
})
Rmodel <- nimbleModel(code)
Rmodel$a
nfdef <- nimbleFunction(
setup = function(model) {},
run = function() {
model$a <- model$a[1:2] + model$a[1:2]
}
)
nfdef <- nimbleFunction(
setup = function(model) {},
run = function() {
model$a <<- model$a[1:2] + model$a[1:2]
}
)
nf <- nfdef(Rmodel)
Rmodel$a
Rmodel$a <- 1:2
Rmodel$a
nf()
Rmodel$a
Cmodel <- compileNimble(Rmodel)
Cmodel$a
Cnf <- compileNimble(nf, project = Rmodel)
Cnf()
Cmodel$a
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2] + mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% muVec[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2] + mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
a <- array(c(1,2,3,4), nrow=2)
a <- matrix(c(1,2,3,4), nrow=2)
a
b <- 10:11
b
a[1:2,1:2]
a[1:2,1:2] %*% b
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(Q0[1:2,1:2] %*% mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2] + mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(Q0[1:2,1:2] %*% mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
getwd()
file.contents
??file.
file.show('loadAllCode.R')
source('loadAllCode.R')
code <- modelCode({
a ~ dnorm(0, 1)
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)
tempdir
tempdir()
file.path(tempdir())
file.path(tempdir(), 'model.txt')
?file.path
.Platform$file.sep
?tempdir
mc <- modelCode({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
constants <- list()
inits <- list()
data <- list(b = 1)
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 10000
thin <- 1
niter <- 1000
thin <- 1
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_data
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
bugs_modelfile
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
tempdir()
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
mc <- modelCode({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 1000
thin <- 1
monitors <- 'a'
niter <- 1000
thin <- 1
###############
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
bugs_data
bugs_modelfile
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
mc <- modelCode({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 1000
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
mc
constants <- list()
data <- list(b = 1)
inits <- list()
monitors <- 'a'
niter <- 1000
thin <- 1
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
tempdir()
bugs
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_data
bugs_modelfile
monitors
bugs_data
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
?bugs
class(bugs_data)
bugs_data$b
bugs_data
list(inits)
bugs_out <- bugs(data=bugs_data, parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
c ~ dnorm(a, 2)
})
constants <- list()
data <- list(b = 1, c=2)
inits <- list()
monitors <- 'a'
niter <- 1000
thin <- 1
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
bugs_data
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS', debug=T)
niter
thin
options(error = recover)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
datalist
formatdata(datalist)
datalist
datalist
towhere
fill
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
monitors <- 'a'
niter <- 1000
thin <- 1
library(R2WinBUGS)
bugs_data <- c(constants, data)
bugs_modelfile <-  file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=bugs_modelfile)
bugs_out <- bugs(data=bugs_data, inits=list(inits), parameters.to.save=monitors, model.file=bugs_modelfile,
n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
library(rjags)
jags_data <- c(constants, data)
jags_data
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitors <- 'a'
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitors, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
monitorVars <- 'a'
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list()
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
monitorVars <- c('a')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
1:3*2
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3*2) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
jags_out
jags_out[[1]]
dimnames(jags_out[[1]])
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3*2 - 1) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list()
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
dimnames(jags_out[[1]])
## model information
mc <- quote({
a ~ dnorm(0, 1)
b ~ dnorm(a, 1)
for(i in 1:3*n - 1) {
x[i] ~ dnorm(b, 1)
}
})
constants <- list(n = 4)
data <- list(b = 1)
inits <- list(a = 3)
## MCMC control
monitorVars <- c('a', 'x')
niter <- 1000
thin <- 1
## extra processing -- don't touch
modelfile <- file.path(tempdir(), 'model.txt')
writeLines(paste0('model\n', paste0(deparse(mc), collapse='\n')), con=modelfile)
constsAndData <- c(constants, data)
###############
### WinBUGS ###
###############
library(R2WinBUGS)
bugs_out <- bugs(data=constsAndData, inits=list(inits), parameters.to.save=monitorVars, model.file=modelfile, n.chains=1, n.iter=niter, n.burnin=0, n.thin=thin, bugs.directory='C:/WinBUGS14', program='WinBUGS')
bugs_out
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
library(rjags)
jags_mod <- jags.model(file=modelfile, data=constsAndData, inits=inits, n.chains=1, quiet=FALSE)
jags_out <- coda.samples(model=jags_mod, variable.names=monitorVars, n.iter=niter, thin=thin)
dimnames(jags_out[[1]])
