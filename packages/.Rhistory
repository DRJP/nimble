install.packages('Rcpp')
install.packages('quadprog')
library(InvCon)
ls()
icfit <- inverse.convex(rnorm(100))
icfit
plot(icfit)
source('loadAllCode.R')
workingdir <- 'C:/Users/Daniel/Documents/Dropbox/My Documents from Berkeley computer/R/9 multievent CR model from Olivier'
load(file.path(workingdir, 'multievent_CR_datafile.RData'))
source('loadAllCode.R')
workingdir <- 'C:/Users/Daniel/Documents/Dropbox/My Documents from Berkeley computer/R/9 multievent CR model from Olivier'
file.path(workingdir, 'multievent_CR_datafile.RData')
load(file.path(workingdir, 'multievent_CR_datafile.RData'))
4
mydata
age
e
source(file.path(workingdir, 'multievent_CR_model_definition.R'))
multistateModelCode
alive <- mydata
for (i in 1:n) {
for (j in 1:K) {
if (j > e[i] & mydata[i,j]==0) {alive[i,j] <- which(rmultinom(1, 1, c(1/4,1/4,1/4,1/4))==1)}
if (j < e[i]) {alive[i,j] <- NA}
}
}
alive
constants <- list(N=n, Years=K, First=e, age=as.matrix(age))
data      <- list(mydata=as.matrix(mydata+1))
inits     <- list(alive=alive)
## build NIMBLE model and MCMC
system.time(Rmodel <- nimbleModel(multistateModelCode, constants=constants, data=data, inits=inits))  ## 17 mins
system.time(Cmodel <- compileNimble(Rmodel))  ## 10 mins
system.time(mcmcSpec <- MCMCspec(Rmodel, print=TRUE, monitors=c('pNB','pB','phiBsa','phiBa','phiNBy','phiNBsa','phiNBa','alpha')))  ## 1 min
system.time(Rmcmc <- buildMCMC(mcmcSpec))  ## 5 mins
system.time(Cmcmc <- compileNimble(Rmcmc, project = Rmodel))  ## 68 mins
niter <- 1
set.seed(0)
system.time(Cmcmc(niter))
samples <- as.matrix(nfVar(Cmcmc, 'mvSamples'))
dimnames(samples)
samples
head(samples)
niter <- 100
set.seed(0)
system.time(Cmcmc(niter))
samples <- as.matrix(nfVar(Cmcmc, 'mvSamples'))
head(samples)
niter <- 10000
set.seed(0)
system.time(Cmcmc(niter))
675/60
samples <- as.matrix(nfVar(Cmcmc, 'mvSamples'))
head(samples)
?apply
apply(samples, 1, mean)
apply(samples, 2, mean)
apply(samples, 2, sd)
source('loadAllCode.R')
source('loadAllCode.R')
source('loadAllCode.R')
code <- modelCode({
x ~ dgamma(1, 1)       # should satisfy 'gamma' conjugacy class
a  ~ dnorm(0, x)       # should satisfy 'norm' conjugacy class
a2 ~ dnorm(0, tau = 3*x+0)
b  ~ dpois(0+5*x)
b2 ~ dpois(1*x*1)
c ~ dgamma(1, 7*x*5)
for(i in 2:3) {
jTau[i] <- 1
jNorm[i] ~ dnorm(c * (a+3) - i, var = jTau[i])
kTauSd[i] <- 2
kLogNorm[i] ~ dlnorm(0 - a - 6*i, kTauSd[i])
}
})
Rmodel <- nimbleModel(code)
mcmcspec <- MCMCspec(Rmodel, monitors = c('x', 'a', 'c'), control = list(scale=0.01))
mcmcspec$getSamplers()
Rmcmc <- buildMCMC(mcmcspec)
Cmodel <- compileNimble(Rmodel)
Cmcmc <- compileNimble(Rmcmc, project = Rmodel)
set.seed(0);     Rmcmc(30)
set.seed(0);     Cmcmc(30)
mvSample  <- nfVar(Rmcmc, 'mvSamples')
CmvSample <- nfVar(Cmcmc, 'mvSamples')
unlist(mvSample[['x']])[1:10]
unlist(CmvSample[['x']])[1:10]
## [1] 3.950556 1.556948 1.598959 2.223759 2.386292 3.266282 3.064019 3.229662 1.985991 2.057249
unlist(mvSample[['a']])[1:10]
unlist(CmvSample[['a']])[1:10]
## [1]  0.586748822  0.851879592  0.103909928 -0.471725977  0.108635621  0.007688418 -0.191624751  0.378682551  0.499847172 -0.428026573
unlist(mvSample[['c']])[1:10]
unlist(CmvSample[['c']])[1:10]
## [1] 0.010341199 0.010341199 0.003846483 0.003846483 0.007257680 0.009680315 0.012594777 0.012594777 0.018179641 0.018179641
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% muVec[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% asCol(muVec[1:2]), Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
source('loadAllCode.R')
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% muVec[1:2], Q0)
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
yVec[1:2] ~ dmnorm(aVec[1:2] + B[1:2,1:2] %*% muVec[1:2], Q0[1:2,1:2])
})
Rmodel <- nimbleModel(code)
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
code <- modelCode({
mu0Vec[1] <- 1
mu0Vec[2] <- 2
Q0[1,1] <- 1.0
Q0[1,2] <- 0.7
Q0[2,1] <- 0.7
Q0[2,2] <- 4.49
muVec[1:2] ~ dmnorm(mu0Vec[1:2], Q0[1:2,1:2])
aVec[1] <- 3
aVec[2] <- 4
B[1,1] ~ dnorm(0,1)
B[1,2] ~ dnorm(0,1)
B[2,1] ~ dnorm(0,1)
B[2,2] ~ dnorm(0,1)
yVec[1:2] ~ dmnorm(aVec[1:2] + muVec[1:2], Q[,])
})
Rmodel <- nimbleModel(code, constants = list(Q=matrix(c(9.0,-2.1,-2.1,16.49),nrow=2)))
Cmodel <- compileNimble(Rmodel)   #### ERRORS!  DOESN'T WORK
source('loadAllCode.R')
workingdir <- 'C:/Users/Daniel/Documents/Dropbox/My Documents from Berkeley computer/R/9 multievent CR model from Olivier'
load(file.path(workingdir, 'multievent_CR_datafile.RData'))
source(file.path(workingdir, 'multievent_CR_model_definition.R'))
# ind<-2:3;     age<-age[ind,];     e<-e[ind];     mydata<-mydata[ind,];     n<-length(ind)     ## optionally, truncate CR history data
## generate inits, constants, data
alive <- mydata
for (i in 1:n) {
for (j in 1:K) {
if (j > e[i] & mydata[i,j]==0) {alive[i,j] <- which(rmultinom(1, 1, c(1/4,1/4,1/4,1/4))==1)}
if (j < e[i]) {alive[i,j] <- NA}
}
}
constants <- list(N=n, Years=K, First=e, age=as.matrix(age))
data      <- list(mydata=as.matrix(mydata+1))
inits     <- list(alive=alive)
## build NIMBLE model and MCMC
system.time(Rmodel <- nimbleModel(multistateModelCode, constants=constants, data=data, inits=inits))  ## 17 mins
1056/60
Rmodel
Rmodel$getNodeNames()
length(model$getNodeNames)
Rmodel$getNodeNames()
length(Rmodel)
Rmodel$getNodeNames()
length(Rmodel$getNodeNames())
length(Rmodel$getNodeNames(stochOnly=T))
length(Rmodel$getNodeNames(determOnly=T))
system.time(mcmcSpec <- MCMCspec(Rmodel, print=TRUE, monitors=c('pNB','pB','phiBsa','phiBa','phiNBy','phiNBsa','phiNBa','alpha')))  ## 1 min
multistateModelCode
mcmcSpec$getSamplers()
1
source('loadAllCode.R')
## load data, model, NIMBLE
# library(nimble)
source('loadAllCode.R')
workingdir <- 'C:/Users/Daniel/Documents/Dropbox/My Documents from Berkeley computer/R/9 multievent CR model from Olivier'
load(file.path(workingdir, 'multievent_CR_datafile.RData'))
source(file.path(workingdir, 'multievent_CR_model_definition.R'))
# ind<-2:3;     age<-age[ind,];     e<-e[ind];     mydata<-mydata[ind,];     n<-length(ind)     ## optionally, truncate CR history data
## generate inits, constants, data
alive <- mydata
for (i in 1:n) {
for (j in 1:K) {
if (j > e[i] & mydata[i,j]==0) {alive[i,j] <- which(rmultinom(1, 1, c(1/4,1/4,1/4,1/4))==1)}
if (j < e[i]) {alive[i,j] <- NA}
}
}
constants <- list(N=n, Years=K, First=e, age=as.matrix(age))
data      <- list(mydata=as.matrix(mydata+1))
inits     <- list(alive=alive)
inits
