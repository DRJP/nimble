source("/Users/Cliff/Desktop/myLoadAllCode.R")
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
is(rmv[['a']])
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
mat
is.numeric(mat)
mat[1]
mat[2]
mat[3]
mat[4]
mat[5]
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, mv)
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
mat[,] <- 1
mat
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
x <- matrix(rnorm(10), nrow = 2)
storage.mode(x)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
}
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
mat
storage.mode(mat)
storage.mode(rnorm(3))
storage.mode(rmv[['a']])
storage.mode(rmv[[]])
storage.mode(rmv[['a']] [[1]])
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
mat <- mat[,] <- 1.2
matrix2mv(mat, rmv)
mat
mat <- as.matrix(rmv)
mat <- mat[1:3, 1:12] <- 1.2
mat
mat <- as.matrix(rmv)
mat
mat[1:3, 1:12] <- 1.2
mat
matrix2mv(mat, rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
#		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
}
matrix2mv(mat, rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
#		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		print(mv[[varName]])#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
}
matrix2mv(mat, rmv)
rmv[a,1] <- 1
rmv['a',1] <- 1
rmv['a',2] <- 1
rmv['a',3] <- 1
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
as.matrix(rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = len)#
	}#
}
matrix2mv(mat, rmv)
mat
as.matrix(rmv)
mat[1,] <- 1:12
mat
matrix2mv(mat, rmv)
as.matrix(rmv)
rmv$a
rmv['a',1] <- 3
as.matrix(rmv)
matrix2mv(mat, rmv)
as.matrix(rmv)
mat
storage.mode(mat) <- 'double'
matrix2mv(mat, rmv)
as.matrix(rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = mv$sizes[[varName]])#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = mv$sizes[[varName]])#
	}#
}
matrix2mv(mat, rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
}
matrix2mv(mat, rmv)
as.matrix(rm)
as.matrix(rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
as.matrix(rmv)
mat
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		cat("about to call\n")#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
}
matrix2mv(mat, rmv)
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		cat("about to call\n")#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
}
matrix2mv(mat, rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
Rmatrix2mvOneVar <- function(mat, mv, varName, k){#
	if( mv$symTab$symbols[[varName]][['type']] == 'double'){#
		storage.mode(mat) <- 'double'#
		len <- ncol(mat)#
		.Call('matrix2ListDouble', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
	if( mv$symTab$symbols[[varName]][['type']] == 'int'){#
		storage.mode(mat) <- 'integer'#
		len <- ncol(mat)#
		.Call('matrix2ListInt', mat, mv[[varName]], listStartIndex = as.integer(1), RnRows = k, Rlength = as.integer(mv$sizes[[varName]]) )#
	}#
}
matrix2mv(mat, rmv)
as.matrix(rmv)
storage.mode(mat)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
as.matrix(rmv)
rmv['a', 2] <- 20
as.matrix(rmv)
matrix2mv(mat, rmv)
as.matrix(rmv)
rmv['x', 1]
rmv['x', 2]
rmv['x', 3]
rmv['a', 3] <- 20
as.matrix(rmv)
matrix2mv(mat, rmv)
as.matrix(rmv)
mat[3, 'a'] <- 100
mat
matrix2mv(mat, rmv)
as.matrix(rmv)
myModel <- nimbleModel(modelCode({#
	a ~ dnorm(0,1)#
	b ~ dnorm(0,1)#
	for(i in 1:2){#
		for(j in 1:2){#
			x[i,j] ~ dnorm(0,1)#
		}	#
	}#
}))#
#
nfGen <- nimbleFunction(setup = function(model){#
	mv <- modelValues(model)#
	mv2 <- modelValues(model)},#
	run = function(){#
		simulate(model)#
		nimCopy(from = model, to = mv, row = 1)#
	})#
rnf <- nfGen(myModel)#
#
cmod <- compileNimble(myModel)#
cnf <- compileNimble(rnf)#
rmv <- nfVar(rnf, 'mv')#
cmv <- nfVar(cnf, 'mv')#
#
resize(rmv, 3)#
mat <- as.matrix(rmv)#
mat[2,] <- 1:12
matrix2mv(mat, rmv)
as.matrix(rmv)
resize(rmv, 5000)
system.time(mat <- as.matrix(rmv) )
system.time(matrix2mv(mat, rmv))
