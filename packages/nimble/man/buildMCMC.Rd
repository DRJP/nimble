% Generated by roxygen2 (4.0.1): do not edit by hand
\name{buildMCMC}
\alias{buildMCMC}
\title{Create an MCMC function, from an MCMCspec object}
\usage{
buildMCMC(mcmcspec)
}
\arguments{
  \item{mcmcspec}{An object of class MCMCspec, which
  specifys the model, samplers, monitors, and thinning
  intervals for the resulting MCMC function.  See
  \code{MCMCspec} for details of this argument.}
}
\description{
Accepts a single required argument, which must be an object
of class MCMCspec.  Returns an MCMC function; see details
section.
}
\details{
Calling buildMCMC(mcmcspec) will produce an R mcmc function
object, say 'Rmcmc'.

The Rmcmc function will have arguments:

niter: The number of iterations to run the MCMC.

reset: Boolean specifying whether to reset the model and
stored samples.  This will simulate into any stochastic
nodes with value NA, propagate values through any
deterministic nodes, and calculate all model probabilities.
This will also reset the internal stored MCMC samples.
Specifying reset=FALSE allows the MCMC algorithm to
continue running from where it left off. Generally,
reset=FALSE should only be used when the MCMC has already
been run.  See examples.

simulateAll: Boolean specifying whether to simulate into
all stochastic nodes.  This will overwrite the current
values in all stochastic nodes.

Samples corresponding to the 'monitors' and 'monitors2'
from the MCMCspec are stored into the interval variables
'mvSamples' and 'mvSamples2', respectively. These may be
accessed using: nfVar(Rmcmc, 'mvSamples')

The Rmcmc function may be compiled to a C MCMC object,
taking care to compile in the same project as the R model
object, using: Cmcmc <- compileNimble(Rmcmc,
project=Rmodel)

The Cmcmc function will function identically as the Rmcmc
object, except acting on the C model object.
}
\examples{
mCode <- modelCode({
 mu ~ dnorm(0, 1)
 x ~ dnorm(mu, 1)
})
Rmodel <- nimbleModel(mCode)
mcmcspec <- MCMCspec(Rmodel)
Rmcmc <- buildMCMC(mcmcspec)
Rmcmc(10)
samples <- nfVar(Rmcmc, 'mvSamples')
samples[['x']]
Rmcmc(100, reset = FALSE)
}
\author{
Daniel Turek
}

