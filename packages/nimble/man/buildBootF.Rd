% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/bootF_build.R
\name{buildBootF}
\alias{buildBootF}
\title{Creates a bootstrap particle filter algorithm to estimate log-likelihood.}
\usage{
buildBootF(model, nodes, thresh = 0.5, silent = FALSE, saveAll = FALSE)
}
\arguments{
\item{model}{A nimble model object, typically representing a state space model or a hidden Markov model}

\item{nodes}{A character vector specifying the latent model nodes over which the particle filter will stochastically integrate over to estimate the log-likelihood function}

\item{thresh}{A number between 0 and 1 specifying when to resample: the resampling step will occur when the effective sample size is less than thresh*(number of particles)}

\item{saveAll}{Whether to save state samples for all time points (T), or only for the most recent time points (F)}
}
\description{
Creates a bootstrap particle filter algorithm to estimate log-likelihood.
}
\details{
The resulting specialized particle filter algorthm will accept a
 single integer argument (m, default 10,000), which specifies the number
 of random \'particles\' to use for estimating the log-likelihood.  The algorithm
 returns the estimated log-likelihood value, and saves
 unequally weighted samples from the posterior distribution of the latent
 states in mv['x',], with corresponding unlogged weights in mv['wts',].
 An equally weighted sample from the posterior can be found in mv['xs',].
}
\examples{
model <- nimbleModel(code = ...)
my_BootF <- buildBootF(model, 'x[1:100]')
Cmodel <- compileNimble(model)
Cmy_BootF <- compileNimble(my_BootF, project = model)
logLike <- Cmy_BootF(m = 100000)
boot_X <- Cmy_BootF$mv['xs',]
}
\author{
Daniel Turek
}
\seealso{
Other filtering.methods: \code{\link{buildAuxF}};
  \code{\link{buildLWF}}
}

