% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/lwF_build.R
\name{buildLWF}
\alias{buildLWF}
\title{Creates a Liu and West filter.}
\usage{
buildLWF(model, nodes, filterControl = structure(list(params = NA, d = 0.99,
  thresh = 0.5, silent = FALSE, saveAll = FALSE), .Names = c("params", "d",
  "thresh", "silent", "saveAll")))
}
\arguments{
\item{model}{A nimble model object, typically representing a state
space model or a hidden Markov model}

\item{nodes}{A character vector specifying the latent model nodes
over which the particle filter will stochastically integrate over to
estimate the log-likelihood function}

\item{filterControl}{A list specifying different control options for the particle filter, described below.}

\item{params}{A character vector sepcifying the parameters you would
like to estimate the posterior distribution of.  If unspecified, parameter nodes are specified as all stochastic top level nodes which}

\item{d}{A discount factor for the Liu-West filter.  Should be close to,
but not above, 1.}

\item{thresh}{A number between 0 and 1 specifying when to resample: the resampling step will occur when the effective sample size is less than thresh*(number of particles)}

\item{saveAll}{Whether to save state samples for all time points (T), or only for the most recent time points (F)}
}
\description{
Creates a Liu and West filter.
}
\details{
The resulting specialized particle filter algorthm will accept a
 single integer argument (m, default 10,000), which specifies the number
 of random \'particles\' to use for estimating the log-likelihood.  The algorithm
 returns the estimated log-likelihood value, and saves
 unequally weighted samples from the posterior distribution of the latent
 states and top-level parameters in mvWSamp, with corresponding logged weights in mvWSamp['wts',].
 An equally weighted sample from the posterior can be found in mvEWSamp.
}
\examples{
model <- nimbleModel(code = ...)
my_LWF <- buildPF(model, 'x[1:100]')
Cmodel <- compileNimble(model)
Cmy_LWF <- compileNimble(my_LWF, project = model)
logLike <- Cmy_LWF(m = 100000)
lw_X <- Cmy_LWF$mvEWSamp['x',]
lw_sigma <- Cmy_LWF$mvEWSamp['sigma',]
}
\author{
Nick Michaud
}
\seealso{
Other filtering.methods: \code{\link{buildAuxF}};
  \code{\link{buildBootF}}; \code{\link{buildENKF}}
}

