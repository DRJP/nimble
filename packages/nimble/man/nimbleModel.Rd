% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in RtmpOyLye4/file1fd16950c398
\name{nimbleModel}
\alias{nimbleModel}
\title{Create a NIMBLE BUGS model}
\usage{
nimbleModel(code, name, constants = list(), dimensions = list(),
  data = list(), inits = list(), returnDef = FALSE, where = globalenv(),
  debug = FALSE)
}
\arguments{
  \item{code}{code for the model in the form returned by
  \code{nimbleCode} or (equivalently) \code{quote}}

  \item{name}{optional character vector giving a name of
  the model for internal use.  If omitted, a name will be
  provided.}

  \item{constants}{named list of constants in the model
  (not including data values).  Constants cannot be
  subsequently modified.}

  \item{dimensions}{named list of dimensions for variables.
  Only needed for variables used with empty indices in
  model code that are not provided in constants or data.}

  \item{data}{named list of values for the data nodes.
  Data values can be subsequently modified.  Providing this
  argument also flags nodes as having data for purposes of
  algorithms that inspect model structure.}

  \item{returnDef}{logical indicating whether the model
  should be returned (FALSE) or just the model definition
  (TRUE).}

  \item{where}{argument passed to \code{setRefClass},
  indicating the environment in which the reference class
  definitions generated for the model and its modelValues
  should be created.  This is needed for managing package
  namespace issues during package loading and does not
  normally need to be provided by a user.}

  \item{debug}{logical indicating whether to put the user
  in a browser for debugging.  Intended for developer use.}
}
\description{
processes BUGS model code and optional constants, data, and
initial values. Returns a NIMBLE model or model definition
}
\details{
See the User Manual or \code{help(modelBaseClass)} for
information about manipulating NIMBLE models created by
\code{nimbleModel}, including methods that operate on
models, such as \code{getDependencies}.

The user may need to provide dimensions for certain
variables as in some cases NIMBLE cannot automatically
determine the dimensions and sizes of variables. See the
User Manual for more information.
}
\examples{
code <- nimbleCode({
    x ~ dnorm(mu, sd = 1)
    mu ~ dnorm(0, sd = prior_sd)
})
constants = list(prior_sd = 1)
data = list(x = 4)
Rmodel <- nimbleModel(code, constants = constants, data = data)
}
\author{
NIMBLE development team
}

