% Generated by roxygen2 (4.1.1): do not edit by hand
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
% Please edit documentation in Rtmpzdod9z/file79eeb11e58b
=======
% Please edit documentation in RtmpLwENQY/file616168dd5c38
>>>>>>> updated S3 methods to follow
=======
% Please edit documentation in Rtmps9T35v/file3fb36b0aae49
>>>>>>> various updates to roxygen
=======
% Please edit documentation in RtmpnG0e98/file11b04f887170
>>>>>>> took Makefiles out of
=======
% Please edit documentation in RtmpAPakJJ/file50d671cdd5c4
>>>>>>> fixed error in MCMCspec roxygen example
=======
% Please edit documentation in RtmpmO7lLg/file4976be42076
>>>>>>> updated suite and autoblock roxygen
=======
% Please edit documentation in Rtmp60KOwh/file78717189d576
>>>>>>> added line to remove .o files after create
=======
% Please edit documentation in Rtmpgi4ISD/file4c34461772
>>>>>>> various cleanups of roxygen stuff
=======
% Please edit documentation in RtmpkxJCni/file2c0b7e7b65d5
>>>>>>> removed top level tests dir
=======
% Please edit documentation in RtmpaEoKPd/file20ba1619d435
>>>>>>> fixed up some roxygen stuff and
=======
% Please edit documentation in Rtmpzdod9z/file79eeb11e58b
>>>>>>> added man files from devel to ease rebase
=======
% Please edit documentation in Rtmpzdod9z/file79eeb11e58b
>>>>>>> 6f0bc2e7a0885e03527d78f21be97fad5c54074a
\name{nimbleModel}
\alias{nimbleModel}
\title{Create a NIMBLE mode from BUGS code}
\usage{
nimbleModel(code, constants = list(), data = list(), inits = list(),
  dimensions = list(), returnDef = FALSE, where = globalenv(),
  debug = FALSE, check = TRUE, name)
}
\arguments{
<<<<<<< HEAD
\item{code}{code for the model in the form returned by \link{nimbleCode} or (equivalently) \code{quote}}\item{constants}{named list of constants in the model.  Constants cannot be subsequently modified. For compatibility with JAGS and BUGS, one can include data values with constants and \code{nimbleModel} will automatically distinguish them based on what appears on the left-hand side of expressions in \code{code}.}\item{data}{named list of values for the data nodes.  Data values can be subsequently modified.  Providing this argument also flags nodes as having data for purposes of algorithms that inspect model structure. Values that are NA will not be flagged as data.}\item{inits}{named list of starting values for model variables. Unlike JAGS, should only be a single list, not a list of lists.}\item{dimensions}{named list of dimensions for variables.  Only needed for variables used with empty indices in model code that are not provided in constants or data.}\item{returnDef}{logical indicating whether the model should be returned (FALSE) or just the model definition (TRUE).}\item{where}{argument passed to \code{setRefClass}, indicating the environment in which the reference class definitions generated for the model and its modelValues should be created.  This is needed for managing package namespace issues during package loading and does not normally need to be provided by a user.}\item{debug}{logical indicating whether to put the user in a browser for debugging.  Intended for developer use.}\item{check}{logical indicating whether to check the model object for missing or invalid values.  Default is TRUE.}\item{name}{optional character vector giving a name of the model for internal use.  If omitted, a name will be provided.}}\description{
processes BUGS model code and optional constants, data, and initial values. Returns a NIMBLE model or model definition
}
\details{
See the User Manual or \code{help(modelBaseClass)} for information about manipulating NIMBLE models created by \code{nimbleModel}, including methods that operate on models, such as \code{getDependencies}.

The user may need to provide dimensions for certain variables as in some cases NIMBLE cannot automatically determine the dimensions and sizes of variables. See the User Manual for more information.

As noted above, one may lump together constants and data (as part of the \code{constants} argument (unlike R interfaces to JAGS and BUGS where they are provided as the \code{data} argument). One may not provide lumped constants and data as the \code{data} argument.

For variables that are a mixture of data nodes and non-data nodes, any values passed in via \code{inits} for components of the variable that are data will be ignored. All data values should be passed in through \code{data} (or \code{constants} as just discussed).
=======
  \item{code}{code for the model in the form returned
  by \link{nimbleCode} or (equivalently) \code{quote}}
  \item{constants}{named list of constants in the
  model. Constants cannot be subsequently modified.
  For compatibility with JAGS and BUGS, one can include
  data values with constants and \code{nimbleModel} will
  automatically distinguish them based on what appears
  on the left-hand side of expressions in \code{code}.}
  \item{data}{named list of values for the data nodes.
  Data values can be subsequently modified. Providing this
  argument also flags nodes as having data for purposes
  of algorithms that inspect model structure. Values
  that are NA will not be flagged as data.} \item{inits}{named list of starting values for model variables.
  Unlike JAGS, should only be a single list, not a list
  of lists.} \item{dimensions}{named list of dimensions
  for variables. Only needed for variables used with empty
  indices in model code that are not provided in constants
  or data.} \item{returnDef}{logical indicating whether
  the model should be returned (FALSE) or just the model
  definition (TRUE).} \item{where}{argument passed to
  \code{setRefClass}, indicating the environment in which
  the reference class definitions generated for the model
  and its modelValues should be created. This is needed for
  managing package namespace issues during package loading
  and does not normally need to be provided by a user.}
  \item{debug}{logical indicating whether to put the user
  in a browser for debugging. Intended for developer use.}
  \item{check}{logical indicating whether to check the model
  object for missing or invalid values. Default is TRUE.}
  \item{name}{optional character vector giving a name of
  the model for internal use. If omitted, a name will be
  provided.}
}
\description{
processes BUGS model code and optional constants, data, and
initial values. Returns a NIMBLE model or model definition
}
\details{
See the User Manual or \code{help(modelBaseClass)} for
information about manipulating NIMBLE models created by
\code{nimbleModel}, including methods that operate on
models, such as \code{getDependencies}. The user may need
to provide dimensions for certain variables as in some
cases NIMBLE cannot automatically determine the dimensions
and sizes of variables. See the User Manual for more
information. As noted above, one may lump together constants
and data (as part of the \code{constants} argument (unlike
R interfaces to JAGS and BUGS where they are provided as the
\code{data} argument). One may not provide lumped constants
and data as the \code{data} argument. For variables that
are a mixture of data nodes and non-data nodes, any values
passed in via \code{inits} for components of the variable
that are data will be ignored. All data values should be
passed in through \code{data} (or \code{constants} as just
discussed).
>>>>>>> added man files from devel to ease rebase
}
\examples{
code <- nimbleCode({
    x ~ dnorm(mu, sd = 1)
    mu ~ dnorm(0, sd = prior_sd)
})
constants = list(prior_sd = 1)
data = list(x = 4)
Rmodel <- nimbleModel(code, constants = constants, data = data)
}
\author{
NIMBLE development team
}

