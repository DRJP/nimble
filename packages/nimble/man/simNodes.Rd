% Generated by roxygen2 (4.1.1): do not edit by hand
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
% Please edit documentation in Rtmpzdod9z/file79ee4b6a6ad4
=======
% Please edit documentation in RtmpLwENQY/file616164fcbb22
>>>>>>> updated S3 methods to follow
=======
% Please edit documentation in Rtmps9T35v/file3fb368065bb0
>>>>>>> various updates to roxygen
=======
% Please edit documentation in RtmpnG0e98/file11b0756b60b8
>>>>>>> took Makefiles out of
=======
% Please edit documentation in RtmpAPakJJ/file50d62b26d013
>>>>>>> fixed error in MCMCspec roxygen example
=======
% Please edit documentation in RtmpmO7lLg/file49764c80fa7e
>>>>>>> updated suite and autoblock roxygen
=======
% Please edit documentation in Rtmp60KOwh/file7871488d9cf1
>>>>>>> added line to remove .o files after create
=======
% Please edit documentation in Rtmpgi4ISD/file4c34690474e5
>>>>>>> various cleanups of roxygen stuff
=======
% Please edit documentation in RtmpkxJCni/file2c0b660083de
>>>>>>> removed top level tests dir
=======
% Please edit documentation in RtmpaEoKPd/file20ba387211cb
>>>>>>> fixed up some roxygen stuff and
=======
% Please edit documentation in Rtmpzdod9z/file79ee4b6a6ad4
>>>>>>> added man files from devel to ease rebase
=======
% Please edit documentation in Rtmpzdod9z/file79ee4b6a6ad4
>>>>>>> 6f0bc2e7a0885e03527d78f21be97fad5c54074a
\name{simNodes}
\alias{calcNodes}
\alias{getLogProbNodes}
\alias{simNodes}
\title{Basic nimbleFunctions for calculate, simulate, and getLogProb with a set of nodes}
\usage{
simNodes(model, nodes)
}
\arguments{
<<<<<<< HEAD
\item{model}{A NIMBLE model}\item{nodes}{A set of nodes. If none are provided, default is all \code{model$getNodeNames()}}}\description{
simulate, calculate, or get existing log probabilities for the current values in a NIMBLE model
}
\details{
These are basic nimbleFunctions that take a model and set of nodes and return a function that will call \code{calculate}, \code{simulate}, or \code{getLogProb} on those nodes.  Each is equivalent to a direct call from R, but in nimbleFunction form they can be be compiled and can be put into a nimbleFunctionList.  For example, \code{myCalc <- calcNodes(model, nodes); ans <- myCalc()} is equivalent to \code{ans <- calculate(model, nodes)}, but one can also do \code{CmyCalc <- compileNimble(myCalc)} to get a faster version.

In nimbleFunctions, for only one set of nodes, it is equivalent or slightly better to simply use \code{calculate(model, nodes)} in the run-time code.  The compiler will process the model-nodes combination in the same way as would occur by creating a specialized \code{calcNodes} in the setup code.  However, if there are multiple sets of nodes, one can do the following:

Setup code: \code{myCalcs <- nimbleFunctionList(calcNodes); myCalcs[[1]] <- calcNodes(model, nodes[[1]]); myCalcs[[2]] <- calcNodes[[2]]}

Run code: \code{for(i in seq_along(myCalcs)) {ans[i] <- myCalcs[[i]]()} }
=======
  \item{model}{A NIMBLE model} \item{nodes}{A set of
  nodes. If none are provided, default is all \code{model
  $getNodeNames()}}
}
\description{
simulate, calculate, or get existing log probabilities for
the current values in a NIMBLE model
}
\details{
These are basic nimbleFunctions that take a model
and set of nodes and return a function that will call
\code{calculate}, \code{simulate}, or \code{getLogProb}
on those nodes. Each is equivalent to a direct call from
R, but in nimbleFunction form they can be be compiled
and can be put into a nimbleFunctionList. For example,
\code{myCalc <- calcNodes(model, nodes); ans <- myCalc()}
is equivalent to \code{ans <- calculate(model, nodes)}, but
one can also do \code{CmyCalc <- compileNimble(myCalc)} to
get a faster version. In nimbleFunctions, for only one set
of nodes, it is equivalent or slightly better to simply
use \code{calculate(model, nodes)} in the run-time code.
The compiler will process the model-nodes combination
in the same way as would occur by creating a specialized
\code{calcNodes} in the setup code. However, if there are
multiple sets of nodes, one can do the following: Setup
code: \code{myCalcs <- nimbleFunctionList(calcNodes);
myCalcs[[1]] <- calcNodes(model, nodes[[1]]);
myCalcs[[2]] <- calcNodes[[2]]} Run code: \code{for(i in
seq_along(myCalcs)) {ans[i] <- myCalcs[[i]]()} }
>>>>>>> added man files from devel to ease rebase
}
\author{
Perry de Valpine
}

