% Generated by roxygen2 (4.1.1): do not edit by hand
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
% Please edit documentation in Rtmpzdod9z/file79ee4d5b9a12
=======
% Please edit documentation in RtmpLwENQY/file6161636d898a
>>>>>>> updated S3 methods to follow
=======
% Please edit documentation in Rtmps9T35v/file3fb367cbd951
>>>>>>> various updates to roxygen
=======
% Please edit documentation in RtmpnG0e98/file11b04f515226
>>>>>>> took Makefiles out of
=======
% Please edit documentation in RtmpAPakJJ/file50d64b7a1f83
>>>>>>> fixed error in MCMCspec roxygen example
=======
% Please edit documentation in RtmpmO7lLg/file497657d3b1a5
>>>>>>> updated suite and autoblock roxygen
=======
% Please edit documentation in Rtmp60KOwh/file7871776a8110
>>>>>>> added line to remove .o files after create
=======
% Please edit documentation in Rtmpgi4ISD/file4c347686f848
>>>>>>> various cleanups of roxygen stuff
=======
% Please edit documentation in RtmpkxJCni/file2c0b7dc6e865
>>>>>>> removed top level tests dir
=======
% Please edit documentation in RtmpaEoKPd/file20ba69801dd5
>>>>>>> fixed up some roxygen stuff and
=======
% Please edit documentation in Rtmpzdod9z/file79ee4d5b9a12
>>>>>>> added man files from devel to ease rebase
\name{declare}
\alias{declare}
\title{Explicitly declare a variable in run-time code of a nimbleFunction}
\usage{
declare(name, def)
}
\arguments{
<<<<<<< HEAD
\item{name}{Name of a variable to declare, without quotes}\item{def}{NIMBLE type declaration, of the form \code{TYPE(nDim, sizes)}, where \code{TYPE} is \code{integer}, \code{double}, or \code{logical}, \code{nDim} is the number of dimensions, and \code{sizes} is an optional vector of sizes concatenated with \code{c}.  If \code{nDim} is omitted, it defaults to 0, indicating a scalar.  If sizes are provided, they should not be changed subsequently in the function, including by assignment.  Omitting \code{nDim} results in a scalar.  For \code{logical}, only scalar is currently supported.}}\description{
Explicitly declare a variable in run-time code of a nimbleFunction, for cases when its dimensions cannot be inferred before it is used.  Works in R and NIMBLE.
}
\details{
In a run-time function of a nimbleFunction (either the \code{run} function or a function provided in \code{methods} when calling \code{nimbleFunction}), the dimensionality and numeric type of a variable is inferred when possible from the statement first assigning into it.  E.g. \code{A <- B + C} infers that \code{A} has numeric types, dimensions and sizes taken from \code{B + C}.  However, if the first appearance of \code{A} is e.g. \code{A[i] <- 5}, \code{A} must have been explicitly declared.  In this case, \code{declare(A, double(1))} would make \code{A} a 1-dimensional (i.e. vector) double.

When sizes are not set, they can be set by a call to \code{setSize} or by assignment to the whole object.  Sizes are not automatically extended if assignment is made to elements beyond the current sizes.  In compiled nimbleFunctions doing so can cause a segfault and crash the R session.


This part of the NIMBLE language is needed for compilation, but it also runs in R.  When run in R, is works by the side effect of creating or modifying \code{name} in the calling environment.
=======
  \item{name}{Name of a variable to declare, without
  quotes} \item{def}{NIMBLE type declaration, of the
  form \code{TYPE(nDim, sizes)}, where \code{TYPE} is
  \code{integer}, \code{double}, or \code{logical},
  \code{nDim} is the number of dimensions, and \code{sizes}
  is an optional vector of sizes concatenated with \code{c}.
  If \code{nDim} is omitted, it defaults to 0, indicating
  a scalar. If sizes are provided, they should not be
  changed subsequently in the function, including by
  assignment. Omitting \code{nDim} results in a scalar. For
  \code{logical}, only scalar is currently supported.}
}
\description{
Explicitly declare a variable in run-time code of a
nimbleFunction, for cases when its dimensions cannot be
inferred before it is used. Works in R and NIMBLE.
}
\details{
In a run-time function of a nimbleFunction (either the
\code{run} function or a function provided in \code{methods}
when calling \code{nimbleFunction}), the dimensionality
and numeric type of a variable is inferred when possible
from the statement first assigning into it. E.g. \code{A
<- B + C} infers that \code{A} has numeric types,
dimensions and sizes taken from \code{B + C}. However,
if the first appearance of \code{A} is e.g. \code{A[i] <-
5}, \code{A} must have been explicitly declared. In this
case, \code{declare(A, double(1))} would make \code{A} a 1-
dimensional (i.e. vector) double. When sizes are not set,
they can be set by a call to \code{setSize} or by assignment
to the whole object. Sizes are not automatically extended
if assignment is made to elements beyond the current sizes.
In compiled nimbleFunctions doing so can cause a segfault
and crash the R session. This part of the NIMBLE language
is needed for compilation, but it also runs in R. When run
in R, is works by the side effect of creating or modifying
\code{name} in the calling environment.
>>>>>>> added man files from devel to ease rebase
}
\examples{
declare(A, logical())             ## scalar logical, the only kind allowed
declare(B, integer(2, c(10, 10))) ## 10 x 10 integer matrix
declare(C, double(3))             ## 3-dimensional double array with no sizes set.
}
\author{
NIMBLE development team
}

