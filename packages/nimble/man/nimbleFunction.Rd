% Generated by roxygen2 (4.1.1): do not edit by hand
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
% Please edit documentation in Rtmpzdod9z/file79ee3048d1a7
=======
% Please edit documentation in RtmpLwENQY/file6161341da6ca
>>>>>>> updated S3 methods to follow
=======
% Please edit documentation in Rtmps9T35v/file3fb34bf85ace
>>>>>>> various updates to roxygen
=======
% Please edit documentation in RtmpnG0e98/file11b06807e4a
>>>>>>> took Makefiles out of
=======
% Please edit documentation in RtmpAPakJJ/file50d641d1a21a
>>>>>>> fixed error in MCMCspec roxygen example
=======
% Please edit documentation in RtmpmO7lLg/file4976516d1f67
>>>>>>> updated suite and autoblock roxygen
=======
% Please edit documentation in Rtmp60KOwh/file787144043461
>>>>>>> added line to remove .o files after create
=======
% Please edit documentation in Rtmpgi4ISD/file4c34231b7291
>>>>>>> various cleanups of roxygen stuff
=======
% Please edit documentation in RtmpkxJCni/file2c0b70a6902d
>>>>>>> removed top level tests dir
=======
% Please edit documentation in RtmpaEoKPd/file20ba2d9e88a6
>>>>>>> fixed up some roxygen stuff and
=======
% Please edit documentation in Rtmpzdod9z/file79ee3048d1a7
>>>>>>> added man files from devel to ease rebase
=======
% Please edit documentation in Rtmpzdod9z/file79ee3048d1a7
>>>>>>> 6f0bc2e7a0885e03527d78f21be97fad5c54074a
\name{nimbleFunction}
\alias{nimbleFunction}
\title{create a nimbleFunction}
\usage{
nimbleFunction(setup = NULL, run = function() { }, methods = list(),
  globalSetup = NULL, contains = NULL, name = NA,
  where = getNimbleFunctionEnvironment())
}
\arguments{
<<<<<<< HEAD
\item{setup}{An optional R function definition for setup processing.}\item{run}{An optional NIMBLE function definition the executes the primary job of the nimbleFunction}\item{methods}{An optional named list of NIMBLE function definitions for other class methods.}\item{globalSetup}{For internal use only}\item{contains}{An optional object returned from \link{nimbleFunctionVirtual} that defines arguments and returnTypes for \code{run} and/or methods, to which the current nimbleFunction must conform}\item{name}{An optional name used internally, for example in generated C++ code.  Usually this is left blank and NIMBLE provides a name.}\item{where}{An optional \code{where} argument passed to \code{setRefClass} for where the reference class definition generated for this nimbleFunction will be stored.  This is needed due to R package namespace issues but should never need to be provided by a user.}}\description{
create a nimbleFunction from a setup function, run function, possibly other methods, and possibly inheritance via \code{contains}
}
\details{
This is the main function for defining nimbleFunctions.  A lot of information is provided in the NIMBLE User Manual, so only a brief summary will be given here.

If a \code{setup} function is provided, then \code{nimbleFunction} returns a generator: a function that when called with arguments for the setup function will execute that function and return a specialized nimbleFunction.   The \code{run} and other methods can be called using \code{$} like in other R classes, e.g. \code{nf$run()}. The methods can use objects that were created in or passed to the \code{setup} function.

If no \code{setup} function is provided, then \code{nimbleFunction} returns a function that executes the \code{run} function.  It is not a generator in this case, and no other \code{methods} can be provided.

If one wants a generator but does not need any setup arguments or code, \code{setup = TRUE} can be used.

See the NIMBLE User Manual for examples.

For more information about the \code{contains} argument, see the section on nimbleFunctionLists.
=======
  \item{setup}{An optional R function definition for
  setup processing.} \item{run}{An optional NIMBLE
  function definition the executes the primary job of
  the nimbleFunction} \item{methods}{An optional named
  list of NIMBLE function definitions for other class
  methods.} \item{contains}{An optional object returned
  from \link{nimbleFunctionVirtual} that defines arguments
  and returnTypes for \code{run} and/or methods, to which
  the current nimbleFunction must conform} \item{name}{An
  optional name used internally, for example in generated C
  ++ code. Usually this is left blank and NIMBLE provides
  a name.} \item{where}{An optional \code{where} argument
  passed to \code{setRefClass} for where the reference
  class definition generated for this nimbleFunction will be
  stored. This is needed due to R package namespace issues
  but should never need to be provided by a user.}
}
\description{
create a nimbleFunction from a setup function, run function,
possibly other methods, and possibly inheritance via
\code{contains}
}
\details{
This is the main function for defining nimbleFunctions. A
lot of information is provided in the NIMBLE User Manual, so
only a brief summary will be given here. If a \code{setup}
function is provided, then \code{nimbleFunction} returns
a generator: a function that when called with arguments
for the setup function will execute that function and
return a specialized nimbleFunction. The \code{run} and
other methods can be called using \code{$} like in other
R classes, e.g. \code{nf$run()}. The methods can use
objects that were created in or passed to the \code{setup}
function. If no \code{setup} function is provided, then
\code{nimbleFunction} returns a function that executes the
\code{run} function. It is not a generator in this case,
and no other \code{methods} can be provided. If one wants
a generator but does not need any setup arguments or code,
\code{setup = TRUE} can be used. See the NIMBLE User Manual
for examples. For more information about the \code{contains}
argument, see the section on nimbleFunctionLists.
>>>>>>> added man files from devel to ease rebase
}
\author{
NIMBLE development team
}

