% Generated by roxygen2 (4.1.1): do not edit by hand
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
% Please edit documentation in Rtmpzdod9z/file79ee4d5b9a12
=======
% Please edit documentation in RtmpLwENQY/file6161636d898a
>>>>>>> updated S3 methods to follow
=======
% Please edit documentation in Rtmps9T35v/file3fb367cbd951
>>>>>>> various updates to roxygen
=======
% Please edit documentation in RtmpnG0e98/file11b04f515226
>>>>>>> took Makefiles out of
=======
% Please edit documentation in RtmpAPakJJ/file50d64b7a1f83
>>>>>>> fixed error in MCMCspec roxygen example
=======
% Please edit documentation in RtmpmO7lLg/file497657d3b1a5
>>>>>>> updated suite and autoblock roxygen
=======
% Please edit documentation in Rtmp60KOwh/file7871776a8110
>>>>>>> added line to remove .o files after create
=======
% Please edit documentation in Rtmpgi4ISD/file4c347686f848
>>>>>>> various cleanups of roxygen stuff
=======
% Please edit documentation in RtmpkxJCni/file2c0b7dc6e865
>>>>>>> removed top level tests dir
=======
% Please edit documentation in RtmpaEoKPd/file20ba69801dd5
>>>>>>> fixed up some roxygen stuff and
=======
% Please edit documentation in Rtmpzdod9z/file79ee4d5b9a12
>>>>>>> added man files from devel to ease rebase
\name{rankSample}
\alias{rankSample}
\title{Generates a weighted sample (with replacement) of ranks}
\usage{
rankSample(weights, size, output, silent = FALSE)
}
\arguments{
<<<<<<< HEAD
\item{weights}{A vector of numeric weights. Does not need to sum to 1, but must be non-negative}\item{size}{Size of sample}\item{output}{An R object into which the values will be placed. See example below for proper use}\item{silent}{Logical indicating whether to suppress logging information}}\description{
Takes a set of non-negative \code{weights} (do not need to sum to 1) and
returns a sample with \code{size} elements of the integers \code{1:length(weights)}, where the probability of being sampled is proportional
to the value of \code{weights}. An important note is that the output vector
will be sorted in ascending order. Also, right now it works slightly odd syntax (see example below). Later releases of NIMBLE will contain more natural syntax.
}
\details{
If invalid weights provided (i.e. negative weights or weights sum to 1), sets output = rep(1, size) and prints warning.
\code{rankSample} can be used inside nimble functions.

\code{rankSample} first samples from the joint distribution \code{size} uniform(0,1) distributions by conditionally sampling from the rank statistics. This leads to
a sorted sample of uniform(0,1)'s. Then, a cdf vector is constructed from weights. Because the sample of uniforms is sorted, \code{rankSample} walks
down the cdf in linear time and fills out the sample.
=======
  \item{weights}{A vector of numeric weights. Does not need
  to sum to 1, but must be non-negative} \item{size}{size
  of sample} \item{output}{an R object into which the values
  will be placed. See example below for proper use}
}
\description{
Takes a set of non-negative \code{weights} (do not need to
sum to 1) and returns a sample with \code{size} elements
of the integers \code{1:length(weights)}, where the
probability of being sampled is proportional to the value of
\code{weights}. An important note is that the output vector
will be sorted in ascending order. Also, right now it works
slightly odd syntax (see example below). Later releases of
NIMBLE will contain more natural syntax.
}
\details{
If invalid weights provided (i.e. negative weights or
weights sum to 1), sets output = rep(1, size) and prints
warning. \code{rankSample} can be used inside nimble
functions. \code{rankSample} first samples from the joint
distribution \code{size} uniform(0,1) distributions by
conditionally sampling from the rank statistics. This leads
to a sorted sample of uniform(0,1)'s. Then, a cdf vector is
constructed from weights. Because the sample of uniforms is
sorted, \code{rankSample} walks down the cdf in linear time
and fills out the sample.
>>>>>>> added man files from devel to ease rebase
}
\examples{
set.seed(1)
sampInts = NA	#sampled integers will be placed in sampInts
rankSample(weights = c(1, 1, 2), size = 10, sampInts)
sampInts
# [1] 1 1 2 2 2 3 3 3 3 3
rankSample(weights = c(1, 1, 2), size = 10000, sampInts)
table(sampInts)
#sampInts
#   1    2    3
#2429 2498 5073

#Used in a nimbleFunction
sampGen <- nimbleFunction(setup = function(){
	x = 1:2
},
run = function(weights = double(1), k = integer() ){
	rankSample(weights, k, x)
	returnType(integer(1))
	return(x)
})
rSamp <- sampGen()
cSamp <- compileNimble(rSamp)
<<<<<<< HEAD
cSamp$run(1:4, 5)
=======
cSamp(1:4, 5)
>>>>>>> added man files from devel to ease rebase
#[1] 1 1 4 4 4
}
\author{
Clifford Anderson-Bergman
}

